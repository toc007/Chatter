// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Chatter.proto

#include "Chatter.pb.h"
#include "Chatter.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Chatter {

static const char* ServerServices_method_names[] = {
  "/Chatter.ServerServices/Ping",
};

std::unique_ptr< ServerServices::Stub> ServerServices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerServices::Stub> stub(new ServerServices::Stub(channel));
  return stub;
}

ServerServices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(ServerServices_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ServerServices::Stub::Ping(::grpc::ClientContext* context, const ::Chatter::PingRequest& request, ::Chatter::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void ServerServices::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::Chatter::PingRequest* request, ::Chatter::PingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Chatter::PingResponse>* ServerServices::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::Chatter::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Chatter::PingResponse>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Chatter::PingResponse>* ServerServices::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::Chatter::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Chatter::PingResponse>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, false);
}

ServerServices::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerServices_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerServices::Service, ::Chatter::PingRequest, ::Chatter::PingResponse>(
          std::mem_fn(&ServerServices::Service::Ping), this)));
}

ServerServices::Service::~Service() {
}

::grpc::Status ServerServices::Service::Ping(::grpc::ServerContext* context, const ::Chatter::PingRequest* request, ::Chatter::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ClientServices_method_names[] = {
  "/Chatter.ClientServices/Ping",
};

std::unique_ptr< ClientServices::Stub> ClientServices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientServices::Stub> stub(new ClientServices::Stub(channel));
  return stub;
}

ClientServices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(ClientServices_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientServices::Stub::Ping(::grpc::ClientContext* context, const ::Chatter::PingRequest& request, ::Chatter::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void ClientServices::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::Chatter::PingRequest* request, ::Chatter::PingResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Chatter::PingResponse>* ClientServices::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::Chatter::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Chatter::PingResponse>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Chatter::PingResponse>* ClientServices::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::Chatter::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Chatter::PingResponse>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, false);
}

ClientServices::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientServices_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientServices::Service, ::Chatter::PingRequest, ::Chatter::PingResponse>(
          std::mem_fn(&ClientServices::Service::Ping), this)));
}

ClientServices::Service::~Service() {
}

::grpc::Status ClientServices::Service::Ping(::grpc::ServerContext* context, const ::Chatter::PingRequest* request, ::Chatter::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Chatter

